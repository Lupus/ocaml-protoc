module type T_sig = sig
  type t
  (** type generated by ocaml-protoc *)

  val make : int -> t * int
  (** [make difficulty] creates a value of type [t] with 
      corresponding difficulty. 
    *)

  val difficulty_size : t -> int
  (** [difficulty_size v] returns the difficulty_size of [v] *)

  val encode : t -> Pbrt.Encoder.t -> unit
  (** [encode v encoder] encode function generated by ocaml-protoc *)

  val decode : Pbrt.Decoder.t -> t
  (** [encode decoder] decode function generated by ocaml-protoc *)
end
(* T_sig *)

module type Runner_sig = sig
  val run : Benchmark.test_request -> Benchmark.test_response
  (** [run request] execute the corresponding request and returns 
      the test response 
    *)
end

module Make (T : T_sig) : Runner_sig = struct
  let run { Benchmark.type_; file_name; test_id } =
    match type_.t with
    | None -> failwith "missing benchmark"
    | Some (Encode difficulty) ->
      let t0 = Unix.gettimeofday () in

      let encoder = Pbrt.Encoder.create () in
      let v, difficulty_size = T.make difficulty in
      let t1 = Unix.gettimeofday () in

      T.encode v encoder;
      let payoad = Pbrt.Encoder.to_bytes encoder in
      let t2 = Unix.gettimeofday () in

      let oc = open_out file_name in
      output_bytes oc payoad;
      close_out oc;
      let t3 = Unix.gettimeofday () in

      let encode_data =
        Benchmark.
          {
            creation_time = t1 -. t0;
            encode_time = t2 -. t1;
            to_file_time = t3 -. t2;
          }
      in

      Benchmark.{ difficulty_size; test_id; data = Some (Encode encode_data) }
    | Some Decode ->
      let t0 = Unix.gettimeofday () in
      let ic = open_in file_name in
      let len = in_channel_length ic in
      let payload = Bytes.create len in
      really_input ic payload 0 len;
      close_in ic;
      let t1 = Unix.gettimeofday () in
      let v = T.decode (Pbrt.Decoder.of_bytes payload) in
      let t2 = Unix.gettimeofday () in
      Benchmark.
        {
          difficulty_size = T.difficulty_size v;
          test_id;
          data =
            Some
              (Decode
                 {
                   Benchmark.from_file_time = t1 -. t0;
                   Benchmark.decode_time = t2 -. t1;
                 });
        }
end
(* Make *)
