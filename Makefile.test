ifndef CXX
    CXX = g++
endif
export CXX

ifndef CPPFLAGS
    CPPFLAGS =
endif
CPPFLAGS+=-Wno-deprecated -std=c++17
export CPPFLAGS

LDFLAGS+=-Wl,--copy-dt-needed-entries
export LDFLAGS

#
# Unit tests
# ----------

.PHONY: tests dune-all

# unit test of the ocaml-protoc internals
tests:
	$(DUNE) build @runtest

#
# Integration tests
# -----------------

# Integration tests with Google protoc (C++ target) to ensure that
# the generated OCaml code can encode/decode message compatible with Google
# implementation

# location of where the Google protoc compiler is installed
PB_INSTALL ?= /usr/
PB_HINC    ?= $(PB_INSTALL)/include
PB_LINC    ?= $(PB_INSTALL)/lib
PROTOC     = $(PB_INSTALL)/bin/protoc

PB_HINC_I = $(addprefix -I, $(PB_HINC))
PB_LINC_L = $(addprefix -L, $(PB_LINC))

export LD_LIBRARY_PATH=$(PB_LINC)

$(OCAMLOPTIONS_HINC)/ocamloptions.pb.cc: $(OCAMLOPTIONS_HINC)/ocamloptions.proto
	cd $(OCAMLOPTIONS_HINC) && \
		$(PROTOC) --cpp_out ./ -I ./ $(PB_HINC_I) ocamloptions.proto

%_cpp.tsk: %_cpp.cpp %.pb.cc $(OCAMLOPTIONS_HINC)/ocamloptions.pb.cc
	$(CXX) $(CPPFLAGS) $(LDFLAGS) \
		-I ./ -I $(INTEGRATION_TESTS_DIR) -I $(OCAMLOPTIONS_HINC) $(PB_HINC_L) \
		$(PB_LINC_L) \
		$? \
		-o $@ -l protobuf

$(INTEGRATION_TESTS_DIR)/test10_cpp.tsk: \
	$(INTEGRATION_TESTS_DIR)/test10_cpp.cpp \
	$(INTEGRATION_TESTS_DIR)/test10.pb.cc \
	$(INTEGRATION_TESTS_DIR)/test09.pb.cc
	$(CXX) $(CPPFLAGS) $(LDFLAGS) \
		-I ./ -I $(INTEGRATION_TESTS_DIR)  \
		$(PB_LINC_L) \
		$? \
		-o $@ -l protobuf

.SECONDARY:

%.pb.cc: %.proto
	$(PROTOC) \
		--cpp_out $(INTEGRATION_TESTS_DIR) \
		$(PB_HINC_I) -I $(OCAMLOPTIONS_HINC) -I $(INTEGRATION_TESTS_DIR) \
		$<


test%: $(INTEGRATION_TESTS_DIR)/test%_cpp.tsk
	INCLUDE=$(PB_HINC)/ $(DUNE) build $(INTEGRATION_TESTS_DIR)/test$*_ml.exe
	$(INTEGRATION_TESTS_DIR)/test$*_cpp.tsk encode
	./_build/default/$(INTEGRATION_TESTS_DIR)/test$*_ml.exe decode
	./_build/default/$(INTEGRATION_TESTS_DIR)/test$*_ml.exe encode
	$(INTEGRATION_TESTS_DIR)/test$*_cpp.tsk decode

.PHONY: integration

integration: test01 test02 test05 test06 test07 test08 test09 test10 \
	           test11 test12 test13 test14 test15 test16 test17 test18 \
			       test19 test20 test21 test22 test23 test24 test26

#
# Yojson
# ------

YOJSON_DIR=src/tests/yojson
OCB_YOJSON=-pkgs yojson,ocaml-protoc-yojson
yojson:
	./ocaml-protoc -yojson -ml_out $(YOJSON_DIR) $(YOJSON_DIR)/yojson_unittest.proto
	$(PROTOC) \
		--cpp_out $(YOJSON_DIR) \
		-I $(PB_HINC) -I $(OCAMLOPTIONS_HINC) -I $(YOJSON_DIR) \
		$(YOJSON_DIR)/yojson_unittest.proto
	$(OCB) $(OCB_YOJSON) -I $(YOJSON_DIR) yojson_unittest_ml.byte
	$(CXX) \
		$(CPPFLAGS) $(LDFLAGS) \
		-I ./ -I $(INTEGRATION_TESTS_DIR) -I $(OCAMLOPTIONS_HINC) -I $(PB_HINC) \
		$(YOJSON_DIR)/yojson_unittest_cpp.cpp $(YOJSON_DIR)/yojson_unittest.pb.cc \
		-L $(PB_LINC) \
		-l protobuf \
		-o $@
	@# Rename cpp executable to something clearer (ie yojson-cpp)
	./yojson
	export OCAMLRUNPARAM="b" && ./yojson_unittest_ml.byte

.PHONY: all-tests
all-tests: tests yojson integration
